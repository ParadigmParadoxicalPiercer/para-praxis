// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Equipment {
  BODYWEIGHT
  DUMBBELL
  GYM
}

enum Goal {
  LOSE_WEIGHT
  FITNESS
  BULK
  V_TAPER
}

enum TemplateCategory {
  FULL_BODY
  UPPER
  LOWER
  CORE
  CARDIO
}

model User {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  password      String
  personalGoals String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  journals      Journal[]
  tasks         Task[]
  workoutPlans  WorkoutPlan[]
  workouts      WorkoutExercise[]
  workoutTemplates WorkoutTemplate[]
  workoutExerciseLogs WorkoutExerciseLog[]
  medias        Media[]
  focusSessions FocusSession[]
  RefreshToken  RefreshToken[]
}

model Journal {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  Media Media[]
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  completed   Boolean   @default(false)
  dueDate     DateTime? // Optional due date
  priority    Int       @default(2) // 1=High 2=Normal 3=Low
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  Media Media[]
}

model WorkoutPlan {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  week        Int? // If you want to track weeks
  equipment   Equipment?
  goal        Goal?
  user        User              @relation(fields: [userId], references: [id])
  userId      Int
  exercises   WorkoutExercise[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model WorkoutExercise {
  id            Int         @id @default(autoincrement())
  name          String
  description   String?
  completed     Boolean     @default(false)
  reps          Int?
  sets          Int?
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId Int
  User          User?       @relation(fields: [userId], references: [id])
  userId        Int?

  Media Media[] // Optional relation to media for images or videos related to the exercise
  logs  WorkoutExerciseLog[]
}

model WorkoutExerciseLog {
  id                 Int               @id @default(autoincrement())
  workoutExercise    WorkoutExercise   @relation(fields: [workoutExerciseId], references: [id])
  workoutExerciseId  Int
  user               User?             @relation(fields: [userId], references: [id])
  userId             Int?
  completedAt        DateTime          @default(now())
  createdAt          DateTime          @default(now())
}

model WorkoutTemplate {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  equipment   Equipment
  goal        Goal
  category    TemplateCategory?
  user        User              @relation(fields: [userId], references: [id])
  userId      Int
  exercises   WorkoutTemplateExercise[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model WorkoutTemplateExercise {
  id                 Int              @id @default(autoincrement())
  name               String
  description        String?
  reps               Int?
  sets               Int?
  order              Int?             @default(0)
  template           WorkoutTemplate  @relation(fields: [templateId], references: [id])
  templateId         Int
}

model Media {
  id         Int      @id @default(autoincrement())
  url        String //Cloudinary secure URL
  publicId   String //Cloudinary public ID for deletion
  uploadedAt DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])
  userId     Int?

  //relations of media to 

  taskId            Int?
  Task              Task?            @relation(fields: [taskId], references: [id])
  Journal           Journal?         @relation(fields: [journalId], references: [id])
  journalId         Int?
  WorkoutExercise   WorkoutExercise? @relation(fields: [workoutExerciseId], references: [id])
  workoutExerciseId Int?
}

model FocusSession {
  id          Int      @id @default(autoincrement())
  duration    Int // Duration in minutes
  task        String? // Optional task description
  notes       String? // Optional notes about the session
  completedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(512)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
  ipAddress String?
  userAgent String?
}
